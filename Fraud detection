# Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

# Step 1: Data Collection
# Load historical transaction data from a CSV file or any other source
transaction_data = pd.read_csv("transaction_data.csv")  # Adjust filename and path as needed

# Step 2: Data Preprocessing
# Clean the data, handle missing values, and balance the dataset if needed
# Optionally, handle categorical variables and outliers

# Step 3: Feature Engineering
# Extract relevant features and engineer new ones that could aid in fraud detection
# For example, calculate transaction frequency, time since last transaction, etc.

# Step 4: Exploratory Data Analysis (EDA)
# Visualize patterns and anomalies in the data using graphs and statistics
# Explore features' distributions, correlations, and identify potential outliers or patterns associated with fraud

# Step 5: Model Selection
# Choose classification algorithms like Random Forest, Support Vector Machines, or Neural Networks
# Consider the nature of the data, computational resources, and interpretability of the models

# Step 6: Model Training
# Split the dataset into training and testing sets
X = transaction_data.drop(columns=['fraudulent'])
y = transaction_data['fraudulent']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Train the selected model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train_scaled, y_train)

# Step 7: Model Evaluation
# Evaluate the model's performance using metrics like accuracy, precision, recall, and F1-score
y_pred = model.predict(X_test_scaled)
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)

print("Accuracy:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1-score:", f1)

# Optionally, visualize feature importance if using tree-based models
feature_importance = pd.Series(model.feature_importances_, index=X.columns)
feature_importance.nlargest(10).plot(kind='barh')
plt.title("Feature Importance")
plt.xlabel("Importance")
plt.ylabel("Feature")
plt.show()
